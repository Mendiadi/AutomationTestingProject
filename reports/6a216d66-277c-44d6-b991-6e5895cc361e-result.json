{"name": "case search query gives also substring cases", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <core.drivers.driver_s.Selenium object at 0x000001D70FEFE2B0>, locator = ('class name', 'book-container')\n\n    def locate_elements(self, locator: tuple[[], str]) -> [WebElement]:\n        \"\"\"\n       Locating elements with wait timeout and option to mark that elements\n       :param locator: tuple - (By,str) - locator\n       :return: the element that found\n       :rtype: [WebElement]\n        \"\"\"\n        try:\n    \n>           elements = WebDriverWait(self._driver, self.wait).until(EC.presence_of_all_elements_located(locator))\n\ncore\\drivers\\driver_s.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"924426205d4a5896104a43356f7f5cc7\")>, method = <function presence_of_all_elements_located.<locals>._predicate at 0x000001D70FF02AF0>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\עדי\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:90: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_search_page.TestSearchPage object at 0x000001D70E3F2790>, api = <core.api.services.Services object at 0x000001D70FC99A90>, data = <commons.generate_data.RandomData object at 0x000001D70FCDEE80>\nmain_page = <core.pages.login_page.LoginPage object at 0x000001D70FEFE070>\n\n    @log_name\n    @allure.title(\"case search query gives also substring cases\")\n    def test_search_and_also_sub_string_apear(self, api, data, main_page):\n        author = api.authors.post_authors(data.generate_author(name=\"oren\"))\n        api.books.post_books(data.generate_book(authorid=author.id, name=\"oren domi\"))\n        search_page = main_page.search(\"or\")\n        search_page.reload()\n>       books, authors = search_page.get_books(), search_page.get_authors()\n\ntests\\test_search_page.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncore\\pages\\search_page.py:27: in get_books\n    return self._driver.locate_elements(self._locators['book_cont'])\ncore\\drivers\\driver_s.py:89: in locate_elements\n    elements = WebDriverWait(self._driver, self.wait).until(EC.presence_of_all_elements_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"924426205d4a5896104a43356f7f5cc7\")>, method = <function presence_of_all_elements_located.<locals>._predicate at 0x000001D70FF02C10>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\עדי\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:90: TimeoutException"}, "steps": [{"name": "post authors from api  CreateAuthorDto(name='oren', homeLatitude=-35.76631393302973, homeLongitude=11.262005990956641)", "status": "passed", "start": 1663743522919, "stop": 1663743522919}, {"name": "post book: CreateBookDto(name='oren domi', description='description', price=10, amountInStock=10, imageUrl=None, authorId=2460)", "status": "passed", "start": 1663743523006, "stop": 1663743523007}, {"name": "search for or", "status": "passed", "start": 1663743523007, "stop": 1663743523594}], "attachments": [{"name": "log", "source": "b3c34bb9-3eab-42d0-b5c9-e63d82e0c8b6-attachment.txt", "type": "text/plain"}], "start": 1663743522816, "stop": 1663743555182, "uuid": "79b642ec-e8e2-488a-bf41-e03f93bd7e42", "historyId": "9bc1d4a749dcf863292eacfe4e4c5df6", "testCaseId": "80b79514d8e8e29ab35c94cf62f65a04", "fullName": "test_search_page.TestSearchPage#test_search_and_also_sub_string_apear", "labels": [{"name": "epic", "value": "verify search page works properly"}, {"name": "suite", "value": "test_search_page"}, {"name": "subSuite", "value": "TestSearchPage"}, {"name": "host", "value": "DESKTOP-6448GON"}, {"name": "thread", "value": "38916-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_search_page"}]}