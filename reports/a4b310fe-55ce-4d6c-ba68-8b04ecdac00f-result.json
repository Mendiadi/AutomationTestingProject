{"name": "try to post book with invalid id ", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'The field AuthorId must be between 1 and 2147483647.' in '{\"type\":\"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\"title\":\"One or more validation errors occurred.\",\"status\":400,\"traceId\":\"00-d79df93e3566cf78daf7b651dc797cd7-8628b7b1326929c4-00\",\"errors\":{\"$.authorId\":[\"The JSON value could not be converted to System.Int32. Path: $.authorId | LineNumber: 0 | BytePositionInLine: 133.\"]}}'", "trace": "self = <tests.api_test.TestBook object at 0x000001D70E3857C0>, id = 2147483648, excepted = 'The field AuthorId must be between 1 and 2147483647.', data = <commons.generate_data.RandomData object at 0x000001D70FCDEE80>\napi = <core.api.services.Services object at 0x000001D70FC99A90>\n\n    @log_name\n    @allure.title(\"try to post book with invalid id \")\n    @pytest.mark.parametrize(\"id,excepted\", [((-1), \"The field AuthorId must be between 1 and 2147483647.\"),\n                                             (2147483648, \"The field AuthorId must be between 1 and 2147483647.\")\n        , (\"sfsf\", \"The JSON value could not be converted to System.Int32.\")])\n    def test_post_book_invalid_id(self, id, excepted, data, api):\n        book_dto = data.generate_book(authorid=id)\n        book = api.books.post_books(book_dto)\n        assert book['code'] == 400\n>       assert excepted in book['msg']\nE       assert 'The field AuthorId must be between 1 and 2147483647.' in '{\"type\":\"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\"title\":\"One or more validation errors occurred.\",\"status\":400,\"traceId\":\"00-d79df93e3566cf78daf7b651dc797cd7-8628b7b1326929c4-00\",\"errors\":{\"$.authorId\":[\"The JSON value could not be converted to System.Int32. Path: $.authorId | LineNumber: 0 | BytePositionInLine: 133.\"]}}'\n\ntests\\api_test.py:180: AssertionError"}, "steps": [{"name": "post book: CreateBookDto(name='Justin Gutierrez', description='description', price=10, amountInStock=10, imageUrl=None, authorId=2147483648)", "status": "passed", "start": 1663743282158, "stop": 1663743282158}], "attachments": [{"name": "log", "source": "32933d91-8266-4aab-9cbe-9f88a06c236f-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "id", "value": "2147483648"}, {"name": "excepted", "value": "'The field AuthorId must be between 1 and 2147483647.'"}], "start": 1663743282151, "stop": 1663743282158, "uuid": "3cb8f286-9bd5-45b9-8847-e758dd2b8b7f", "historyId": "cebdd2cece7715a879158bb5c1ad35d5", "testCaseId": "9cece9342f9b1fd2a8ad3ebffea242c7", "fullName": "api_test.TestBook#test_post_book_invalid_id", "labels": [{"name": "epic", "value": "books from api"}, {"name": "tag", "value": "@pytest.mark.usefixtures('safe_load')"}, {"name": "suite", "value": "api_test"}, {"name": "subSuite", "value": "TestBook"}, {"name": "host", "value": "DESKTOP-6448GON"}, {"name": "thread", "value": "38916-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "api_test"}]}